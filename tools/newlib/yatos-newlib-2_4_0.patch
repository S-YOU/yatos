diff -Nupr newlib-2.4.0.orig/config.sub newlib-2.4.0/config.sub
--- newlib-2.4.0.orig/config.sub	2016-03-30 06:33:42.000000000 +0900
+++ newlib-2.4.0/config.sub	2016-05-20 00:04:43.630120991 +0900
@@ -2,7 +2,7 @@
 # Configuration validation subroutine script.
 #   Copyright 1992-2016 Free Software Foundation, Inc.
 
-timestamp='2016-01-01'
+timestamp='2016-05-08'
 
 # This file is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License as published by
@@ -1399,7 +1399,7 @@ case $os in
 	      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \
 	      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \
 	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \
-	      | -onefs* | -tirtos*)
+	      | -onefs* | -tirtos* | -yatos* )
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	-qnx*)
diff -Nupr newlib-2.4.0.orig/newlib/configure.host newlib-2.4.0/newlib/configure.host
--- newlib-2.4.0.orig/newlib/configure.host	2016-03-30 06:33:42.000000000 +0900
+++ newlib-2.4.0/newlib/configure.host	2016-05-20 00:04:43.630120991 +0900
@@ -560,6 +560,10 @@ case "${host}" in
   z8k-*-coff)
 	sys_dir=z8ksim
 	;;
+  x86_64-*-yatos*)
+	sys_dir=yatos
+	newlib_cflags="${newlib_cflags} -mcmodel=large -g -O0 -DSIGNAL_PROVIDED"
+	;;
 esac
 
 # Host specific flag settings -- usually for features that are not
diff -Nupr newlib-2.4.0.orig/newlib/libc/sys/configure.in newlib-2.4.0/newlib/libc/sys/configure.in
--- newlib-2.4.0.orig/newlib/libc/sys/configure.in	2016-03-30 06:33:42.000000000 +0900
+++ newlib-2.4.0/newlib/libc/sys/configure.in	2016-05-20 00:04:43.630120991 +0900
@@ -48,6 +48,7 @@ if test -n "${sys_dir}"; then
 	tirtos) AC_CONFIG_SUBDIRS(tirtos) ;;
 	w65) AC_CONFIG_SUBDIRS(w65) ;;
 	z8ksim) AC_CONFIG_SUBDIRS(z8ksim) ;;
+	yatos) AC_CONFIG_SUBDIRS(yatos) ;;
   esac;
 fi
 
diff -Nupr newlib-2.4.0.orig/newlib/libc/sys/yatos/Makefile.am newlib-2.4.0/newlib/libc/sys/yatos/Makefile.am
--- newlib-2.4.0.orig/newlib/libc/sys/yatos/Makefile.am	1970-01-01 09:00:00.000000000 +0900
+++ newlib-2.4.0/newlib/libc/sys/yatos/Makefile.am	2016-05-20 00:04:43.630120991 +0900
@@ -0,0 +1,15 @@
+AUTOMAKE_OPTIONS = cygnus
+INCLUDES = $(NEWLIB_CFLAGS) $(CROSS_CFLAGS) $(TARGET_CFLAGS)
+AM_CCASFLAGS = $(INCLUDES)
+
+noinst_LIBRARIES = lib.a
+
+lib_a_SOURCES = syscalls.c signal-glue.c reent-glue.c
+lib_a_CCASFLAGS = $(AM_CCASFLAGS)
+lib_a_CFLAGS = $(AM_CFLAGS)
+
+all: crt0.o
+
+ACLOCAL_AMFLAGS = -I ../../.. -I ../../../..
+CONFIG_STATUS_DEPENDENCIES = $(newlib_basedir)/configure.host
+
diff -Nupr newlib-2.4.0.orig/newlib/libc/sys/yatos/configure.in newlib-2.4.0/newlib/libc/sys/yatos/configure.in
--- newlib-2.4.0.orig/newlib/libc/sys/yatos/configure.in	1970-01-01 09:00:00.000000000 +0900
+++ newlib-2.4.0/newlib/libc/sys/yatos/configure.in	2016-05-20 00:04:43.630120991 +0900
@@ -0,0 +1,7 @@
+AC_PREREQ(2.59)
+AC_INIT([newlib], [NEWLIB_VERSION])
+AC_CONFIG_SRCDIR([crt0.c])
+AC_CONFIG_AUX_DIR(../../../..)
+NEWLIB_CONFIGURE(../../..)
+AC_CONFIG_FILES([Makefile])
+AC_OUTPUT
diff -Nupr newlib-2.4.0.orig/newlib/libc/sys/yatos/crt0.c newlib-2.4.0/newlib/libc/sys/yatos/crt0.c
--- newlib-2.4.0.orig/newlib/libc/sys/yatos/crt0.c	1970-01-01 09:00:00.000000000 +0900
+++ newlib-2.4.0/newlib/libc/sys/yatos/crt0.c	2016-05-20 01:26:50.760974843 +0900
@@ -0,0 +1,49 @@
+/* -*- mode: C; coding:utf-8 -*- */
+/**********************************************************************/
+/*  Yet Another Teachable Operating System                            */
+/*  Copyright 2016 Takeharu KATO                                      */
+/*                                                                    */
+/*  Userlland start routine                                           */
+/*                                                                    */
+/**********************************************************************/
+
+#include <stdint.h>
+#include <stddef.h>
+#include <stdbool.h>
+#include <stdio.h>
+
+typedef uint64_t syscall_arg_type;  /*< システムコール引数の型  */
+typedef int64_t  syscall_res_type;  /*< システムコール結果の型  */
+
+extern int main(int _argc, char *_argv[]);
+extern void set_errno(syscall_res_type _res);
+extern void _clear_bss(void);
+extern void yatos_thread_exit(int rc);
+extern void _yatos_register_common_event_handler(void);
+
+extern void _setup_reentrant_structure(void);
+
+char **environ;
+
+void
+_start(int argc, char *argv[], char **envp) {
+	int            rc;
+	char buf1[BUFSIZ];
+	char buf2[BUFSIZ];
+	char buf3[BUFSIZ];
+
+	_clear_bss();
+	_setup_reentrant_structure();
+	environ = envp;
+	__yatos_user_event_handler_init();
+	_yatos_register_common_event_handler();
+
+	setbuf(stdin, buf1);
+	setbuf(stdout, buf2);
+	setbuf(stderr, buf3);
+	
+	rc = main(argc, argv);
+
+	yatos_thread_exit(rc);
+}
+
diff -Nupr newlib-2.4.0.orig/newlib/libc/sys/yatos/reent-glue.c newlib-2.4.0/newlib/libc/sys/yatos/reent-glue.c
--- newlib-2.4.0.orig/newlib/libc/sys/yatos/reent-glue.c	1970-01-01 09:00:00.000000000 +0900
+++ newlib-2.4.0/newlib/libc/sys/yatos/reent-glue.c	2016-05-20 01:28:29.254966774 +0900
@@ -0,0 +1,26 @@
+/* -*- mode: C; coding:utf-8 -*- */
+/**********************************************************************/
+/*  Yet Another Teachable Operating System                            */
+/*  Copyright 2016 Takeharu KATO                                      */
+/*                                                                    */
+/*  newlib glue routines(reentrant)                                   */
+/*                                                                    */
+/**********************************************************************/
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <reent.h>
+
+extern int yatos_printf(const char *fmt,...);
+
+void
+_setup_reentrant_structure(void){
+	struct _reent *p;
+
+	p = malloc( sizeof(struct _reent) );
+	if ( p == NULL ) 
+		yatos_printf("Warn: Can not allocate reent for process.\n");
+	else
+		_REENT_INIT_PTR(p);
+}
+
diff -Nupr newlib-2.4.0.orig/newlib/libc/sys/yatos/signal-glue.c newlib-2.4.0/newlib/libc/sys/yatos/signal-glue.c
--- newlib-2.4.0.orig/newlib/libc/sys/yatos/signal-glue.c	1970-01-01 09:00:00.000000000 +0900
+++ newlib-2.4.0/newlib/libc/sys/yatos/signal-glue.c	2016-05-20 00:04:43.631120991 +0900
@@ -0,0 +1,74 @@
+/* -*- mode: C; coding:utf-8 -*- */
+/**********************************************************************/
+/*  Yet Another Teachable Operating System                            */
+/*  Copyright 2016 Takeharu KATO                                      */
+/*                                                                    */
+/*  newlib signal glue routines                                       */
+/*                                                                    */
+/**********************************************************************/
+
+#include <signal.h>
+
+struct _evinfo;
+typedef void (*ev_handler)(uint64_t , struct _evinfo *, void *);
+
+#define EV_NR_EVENT  (128)                     /*<  128イベント  */
+#define EV_HDLR_DFL	((ev_handler)0)	/*< デフォルト動作 */
+#define EV_HDLR_IGN	((ev_handler)1)	/*< 無視 */
+
+extern int yatos_register_user_event_handler(int _id, ev_handler _handler);
+extern int yatos_proc_send_event(uint64_t _dest, int  _id, void * _data);
+extern uint64_t yatos_thread_getid(void);
+typedef void (*signal_func)(int );
+static signal_func sighndlrs[EV_NR_EVENT];
+
+void
+_nl_yatos_init_signal_handlers(void) {
+	int i;
+	
+	for( i = 0; EV_NR_EVENT > i; ++i)
+		sighndlrs[i] = NULL;
+}
+
+void
+_nl_yatos_invoke_signal_handler(uint64_t evno, struct _evinfo *evinf, void *ef) {
+	signal_func func;
+
+	if ( evno >= EV_NR_EVENT)
+		return;
+
+	if ( sighndlrs[evno] == NULL )
+		return;
+
+	func = sighndlrs[evno];
+
+	func(evno);
+}
+
+_sig_func_ptr
+signal(int sig, void(*func)(int)){
+	_sig_func_ptr old;
+
+	old = (_sig_func_ptr)sighndlrs[sig];
+	if ( func == SIG_DFL ) {
+		
+		sighndlrs[sig] = NULL;		
+		yatos_register_user_event_handler(sig, EV_HDLR_DFL);
+	} else if ( func == SIG_IGN ) {
+
+		sighndlrs[sig] = NULL;
+		yatos_register_user_event_handler(sig, EV_HDLR_IGN);
+	} else {
+
+		sighndlrs[sig] = func;
+		yatos_register_user_event_handler(sig, _nl_yatos_invoke_signal_handler);
+	}
+
+	return old;
+}
+
+int
+raise(int sig) {
+
+	return yatos_proc_send_event(yatos_thread_getid(), sig, NULL);
+}
diff -Nupr newlib-2.4.0.orig/newlib/libc/sys/yatos/syscalls.c newlib-2.4.0/newlib/libc/sys/yatos/syscalls.c
--- newlib-2.4.0.orig/newlib/libc/sys/yatos/syscalls.c	1970-01-01 09:00:00.000000000 +0900
+++ newlib-2.4.0/newlib/libc/sys/yatos/syscalls.c	2016-05-20 00:04:43.631120991 +0900
@@ -0,0 +1,136 @@
+/* -*- mode: C; coding:utf-8 -*- */
+/**********************************************************************/
+/*  Yet Another Teachable Operating System                            */
+/*  Copyright 2016 Takeharu KATO                                      */
+/*                                                                    */
+/*  newlib glue routines                                              */
+/*                                                                    */
+/**********************************************************************/
+
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/fcntl.h>
+#include <sys/times.h>
+#include <sys/errno.h>
+#include <sys/time.h>
+#include <stdio.h>
+#include <stdint.h>
+
+typedef int64_t  syscall_res_type;  /*< システムコール結果の型  */
+extern void      set_errno(syscall_res_type _res);
+extern int       yatos_printf(const char *fmt,...);
+extern void      yatos_thread_exit(int rc);
+extern uint64_t  yatos_thread_getid(void);
+extern int       yatos_proc_send_proc_event(uint64_t _dest, int  _id, void *_data);
+extern void     *yatos_vm_sbrk(intptr_t increment);
+extern int       yatos_thread_wait(uint64_t _wait_tid, uint32_t _wflags, 
+    uint64_t *_exit_tidp, uint64_t *_rcp);
+extern int yatos_dbg_write(const char *buf, size_t len);
+
+void
+_exit(void){
+
+	yatos_thread_exit(0);
+}
+int
+close(int file){
+
+	return -1;
+}
+
+int 
+execve(char *name, char **argv, char **env) {
+
+		set_errno( -ENOMEM );
+		return -1;
+}
+int
+fork(void){
+
+	set_errno( -EAGAIN );
+	return -1;
+}
+int
+fstat(int file, struct stat *st){
+
+	st->st_mode = S_IFCHR;
+	return 0;
+}
+int 
+getpid(void){
+	
+	return yatos_thread_getid();
+}
+int
+isatty(int file) {
+	
+	return 1;
+}
+int
+kill(int pid, int sig) {
+
+	return yatos_proc_send_event(pid, sig, NULL);
+}
+int
+link(char *old, char *new){
+
+	set_errno( -EMLINK );
+	return -1;
+}
+int
+lseek(int file, int ptr, int dir) {
+
+	return 0;
+}
+int 
+open(const char *name, int flags, ...) {
+
+	return -1;
+}
+int
+read(int file, char *ptr, int len) {
+
+	return 0;
+}
+caddr_t 
+sbrk(int incr){
+
+	return (caddr_t)yatos_vm_sbrk( (intptr_t)incr );
+}
+int
+stat(const char *file, struct stat *st){
+
+	st->st_mode = S_IFCHR;
+	return 0;
+}
+clock_t 
+times(struct tms *buf) {
+	return -1;
+}
+int
+unlink(char *name) {
+
+	return -1;
+}
+int
+wait(int *status) {
+	uint64_t exit_tid;
+	uint64_t     chrc;
+	int            rc;
+
+	rc = yatos_thread_wait(0, 0, &exit_tid, &chrc);
+	if ( rc == 0 )
+		*status = chrc;
+	return 	rc;
+}
+int
+write(int file, char *ptr, int len) {
+
+	return yatos_dbg_write(ptr, len);
+}
+int
+gettimeofday(struct timeval *p, void *z) {
+
+	set_errno( -ENOSYS );
+	return -1;
+}
